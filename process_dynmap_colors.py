import os, sys, requests

if __name__ == "__main__":
    # download if necessary
    if not os.path.isfile("color_map.txt"):
        with open("color_map.txt", "w") as f:
            f.write(requests.get("https://raw.githubusercontent.com/webbukkit/dynmap/v3.0/DynmapCore/src/main/resources/extracted/colorschemes/default.txt").text)

    # read
    with open("color_map.txt") as f:
        lines = f.readlines()

    # parse
    color_map = {}
    for l in lines:
        if len(l.strip()) == 0:
            continue
        line = l.strip().split(" ")

        block_name = line[0]
        if "[" in block_name:
            block_name = block_name.split("[")[0]

        block_name = block_name.replace("minecraft:", "")
        color = (int(line[1]), int(line[2]), int(line[3]))
        color_map[block_name] = color

    # add some missing textures from extracted ones
    from extracted_block_colors import BLOCK_COLORS as extracted_colors

    # overwrite some grey or missing ones (foilage, updates, different texture naming...)
    # This should propably be done with some more logic than just the filename, but it works for enough blocks to recognize the generated landscape
    extracted_colors |= {
        "water": (0, 0, 253),
        "mangrove_roots": (76, 60, 36),
        "bubble_column": (0, 0, 253),
    }

    # merge
    color_map |= extracted_colors

    # write
    with open("block_colors.py", "w") as f:
        f.write(f"# This file is generated by {os.path.basename(sys.argv[0])}\n")
        f.write("BLOCK_COLORS = {\n")
        for block, color in color_map.items():
            if "leaves" in block:
                color = (0, 128, 0)
            f.write(f"    \"{block}\": {color},\n")
        f.write("}\n")